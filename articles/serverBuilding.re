= AWSでウェブサーバを立てよう

この章では実際にAWSのEC2を使ってウェブサーバを立てます。

//pagebreak

== 事前準備

=== お使いのパソコンがWindowsの場合

Windowsのパソコンを使っている方は、サーバを立てる前に「ターミナル」と呼ばれる黒い画面のソフトをインストールしておきましょう。サーバに接続するときにこのターミナルを使うのですが、ターミナルのソフトには色々な種類があります。

 * RLogin（@<href>{http://nanno.dip.jp/softlib/man/rlogin/}）
 * Poderosa（@<href>{https://ja.poderosa-terminal.com/}）
 * Tera Term（@<href>{https://ja.osdn.net/projects/ttssh2/}）
 * PuTTYjp（@<href>{http://hp.vector.co.jp/authors/VA024651/PuTTYkj.html}）@<fn>{PuTTYjp}

//footnote[PuTTYjp][PuTTYjpを使う場合、.pemの秘密鍵をPuTTYgenで.ppkに変換する必要が出てきます。他のターミナルソフトに比べると一手間余計にかかるので、特にこだわりがなければRLoginを使用するのがお勧めです。]

//image[rlogin][RLogin][scale=0.8]{
//}

本著ではいちばん上のRLogin（@<img>{rlogin}）を使って説明していきますので、特にこだわりがなければRLoginを使うことをお勧めします。RLoginの「実行プログラム(64bit)@<fn>{64bit}」（@<img>{downloadRLogin01}）のURL、@<href>{http://nanno.dip.jp/softlib/program/rlogin_x64.zip}をクリックしてください。

//footnote[64bit][もしパソコンのWindowsが32bit版だった場合は「実行プログラム(32bit)」のURLをクリックしてください。]

//image[downloadRLogin01][「実行プログラム(64bit)」のURLをクリックしてダウンロード][scale=0.8]{
//}

ダウンロードしたZIPファイルを保存（@<img>{downloadRLogin02}）します。保存場所はどこでも構いませんが、後でどこに置いたか分からなくなりそうな人はデスクトップに保存しておきましょう。

//image[downloadRLogin02][「ファイルを保存する」でパソコンに保存][scale=0.8]{
//}

デスクトップのZIPファイル（rlogin_x64.zip）を右クリック（@<img>{downloadRLogin03}）して、解凍＞デスクトップに解凍@<fn>{lhaplus}をクリックします。

//image[downloadRLogin03][ZIPファイルを右クリックして解凍＞デスクトップに解凍][scale=0.8]{
//}

//footnote[lhaplus][右クリックしても「解凍」が見当たらないときは、圧縮・解凍の定番ソフトであるLhaplusをインストールしましょう。 @<href>{https://forest.watch.impress.co.jp/library/software/lhaplus/}]

解凍したら、デスクトップにできた「rlogin_x64」というフォルダの中にある「RLogin.exe」@<fn>{filenameExtension}（@<img>{downloadRLogin04}）をダブルクリックすればRLoginが起動（@<img>{downloadRLogin05}）します。

//footnote[filenameExtension][フォルダの中にRLoginはあるけどRLogin.exeなんて見当たらない・・・という場合、ファイルの拡張子が非表示になっています。この後も拡張子を含めてファイル名を確認する場面がでてきますので、「拡張子 表示」でGoogle検索して拡張子が表示されるように設定変更しておきましょう。]

//image[downloadRLogin04][RLogin.exeをダブルクリック][scale=0.8]{
//}

//image[downloadRLogin05][RLoginが起動した][scale=0.8]{
//}

これでRLoginのインストールは完了です。起動したRLoginはいったん閉じてしまって構いません。また後で使いますので、デスクトップの「rlogin_x64」フォルダとその中にある「RLogin.exe」をごみ箱へ捨てないように注意してください。

=== お使いのパソコンがMacの場合

Macを使っている方は、最初から「ターミナル」というソフトがインストールされていますのでそちらを利用しましょう。ターミナルがどこにあるのか分からないときは、Macの画面で右上にある虫眼鏡のマークをクリックして、Spotlightで「ターミナル」と検索すれば起動できます。

//comment{
TODO:Macの部分は後でキャプチャを追加
//}
以上で事前準備は完了です。お待たせしました。いよいよサーバを立てましょう。

== EC2でウェブサーバを立てる

AWSにはRoute53のようなネームサーバをはじめとして色々なサービスがありますが、サーバはAmazon Elastic Compute Cloudの略で「EC2」（イーシーツー）と呼ばれています。

ちなみにAWSではサーバのことを、@<ttb>{インスタンス}と呼びます。ここから先でインスタンスと書いてあったらサーバのことだと思ってください。

それではマネジメントコンソールの左上にある「サービス」から、「コンピューティング」の下にある「EC2」（@<img>{selectEC2}）をクリックしてください。

//image[selectEC2][サービス＞コンピューティング＞EC2][scale=0.8]{
//}

「EC2」をクリックすると、EC2のダッシュボード（@<img>{EC2Dashboard}）が表示されます。「注意: インスタンスは アジアパシフィック (東京) リージョンで作成されます」と書いてあることを確認したら、中央にある「インスタンスの作成」をクリックしてください。

//image[EC2Dashboard][EC2ダッシュボードで「インスタンスの作成」をクリック][scale=0.8]{
//}

ここから7つのステップでインスタンスを作成していきます。

=== ステップ 1: Amazon マシンイメージ (AMI)

はじめにAmazonマシンイメージ、略してAMIを選択します。AMIはこれから作るサーバのもととなるテンプレートのようなものです。

左側の「無料利用枠のみ」にチェックを入れる（@<img>{ec2Step01}）と、無料利用枠以外のAMIは選択できなくなります。うっかりWindows Serverのような有料AMIを選択しないようにチェックを入れておきましょう。

//image[ec2Step01][「無料利用枠のみ」にチェックを入れて「Amazon Linux AMI」を選択][scale=0.8]{
//}

パソコンにはOSという基本ソフトが入っていて、WordやExcel、ChromeといったソフトはそのOSの上で動いています。皆さんのパソコンにも「Windows 10」や「Mac OS X Lion」などのOSが入っていますよね。

そしてパソコンと同じようにサーバにも「Linux」や「Windows Server」といったサーバ用のOSがあります。サーバを立てるときにはLinuxを選択することが多いのですが、このLinuxの中にもさらに「RHEL（Red Hat Enterprise Linux）」や「CentOS」、「Ubuntu」などいろいろなディストリビューション（種類）があります。

今回は上から2つめにある「Amazon Linux」のAMIを選択します。Amazon LinuxならAWSのツールがあらかじめ入っており、AmazonによるOSのサポートも受けられる@<fn>{osSupport}ため、AWSでサーバを立てるときはOSはAmazon Linuxにすることをお勧めします。Amazon LinuxはRed Hat系のディストリビューションですので、Red HatやCentOSのサーバを使ったことがある方なら違和感なく使えると思います。

//footnote[osSupport][AmazonによるOSのサポートというのは「手取り足取り教えてくれる」ということではなく、たとえば「バグや脆弱性が発見されたときに修正バージョンを出してくれる」というものです。サポートの期限はAmazon Linuxが2020年6月30日まで、Amazon Linux 2が2023年6月30日まで、と公式に発表されています。 @<href>{https://aws.amazon.com/jp/amazon-linux-2/faqs/}]

Amazon Linuxには2018年8月時点で

 * Amazon Linux
 * Amazon Linux 2

の2種類があります。Amazon LinuxはRHEL6系なのでCentOS 6、Amazon Linux 2はRHEL7系なのでCentOS 7と使い勝手はほぼ同じです。本著ではAmazon Linuxを選択します。@<fn>{apache}

//footnote[apache][ちなみにこの後インストールするApacheというミドルウェアはAmazon Linuxだと2.2系、Amazon Linux 2だと2.4系になります。]

=== ステップ 2: インスタンスタイプの選択

ステップ2ではインスタンスタイプを選択（@<img>{ec2Step02}）します。テスト環境にはT2インスタンス、データベースやキャッシュを処理させるならM5インスタンス、というように用途別にたくさん用意されているので、その中から適したスペックのインスタンスタイプを選びます。

//image[ec2Step02][t2.microを選択して「次の手順: インスタンスの詳細の設定」をクリック][scale=0.8]{
//}

インスタンスタイプの接頭辞になっている「T2」や「M4」はインスタンスファミリーと呼ばれるグループを表しており、Tが開発・検証用、Mが汎用、CがCPU重視、Rはメモリ重視、のように特徴ごとに分かれています。文字の後ろの2や4といった数字は世代を表しているので、T2なら開発・検証向けのグループで2世代目ということですね。Tは3世代目となるT3もリリースされたので、2018年8月時点ではT2とT3がどちらも選択できる状態になっています。

インスタンスファミリーの後ろにあるnano、micro、small、medium、large、xlargeなどはCPUやメモリといったスペックの大きさを表します。t2.smallならCPU@<fn>{vCPU}が1コアでメモリが2GiB、t2.mediumならCPUは2コアでメモリが4GiBというように、大きくなるにつれて段々CPUやメモリが増えていきます。@<fn>{potato}

//footnote[vCPU][インスタンスタイプの表ではCPUが「vCPU」と書かれていると思います。仮想サーバ内にある仮想のCPUのことをVirtual CPU、略してvCPUといいます。]

//footnote[potato][S→M→Lと段々量が増えていくなんてマクドナルドのポテトと同じですね。]

今回は個人で「ちょっとWordPressのサイトを作ってみよう！」という用途なので高スペックは必要ありません。無料利用枠の対象となっているt2.microを選択して「次の手順: インスタンスの詳細の設定」をクリックします。

===[column] 【コラム】T2系バーストモードの落とし穴

T2系のインスタンスタイプには落とし穴があるので注意が必要です。

たとえば先ほど選択したt2.microというインスタンスタイプはCPUが1コアと書いてありますが、実際はベースラインという「普段はここまで使っていいよ」というラインがあり、サイトにあまりアクセスが来ておらずサーバがヒマなとき、vCPUの使用率がこのベースラインを下回っていれば「CPUクレジット」というものがちゃりんちゃりんと貯まっていきます。@<fn>{baseLine}CPUクレジットはt2.microなら1時間あたり6ずつ溜まっていって最大で144まで蓄積できます。

//footnote[baseLine][@<href>{https://docs.aws.amazon.com/ja_jp/AWSEC2/latest/UserGuide/t2-credits-baseline-concepts.html}]

前述のベースラインですがt2.microだとなんとたったの10%です。普段はvCPUを1コアの1/10しか使えない、ということです。そしてサイトにアクセスがわーっと殺到してCPU使用率がベースラインの10%を超えるとバーストモードになり、バーストモードの間だけはvCPUが100%使えるようになります。

バーストモードの間は今まで貯めておいたCPUクレジットを使います。1クレジットにつき1分間バーストできるので、t2.microなら最大で144分しかバーストできません。つまりCPU使用率が10%を超える状態が2時間半続いたら、その時点でバーストが終了して強制的にまたvCPUが10%までしか使えなくなってしまうのです。

アクセスが殺到していたからvCPUを10%以上使っていたわけで、それが急に10%までしか使えなくなってしまったらどうなるのでしょう？バーストが終了した瞬間にサーバは過負荷となり、場合によってはサイトが応答できなくなってしまいます。

つまり今までオンプレミスでCPUが1コアのサーバを使っていてそれがちょうどよかったからといって、AWSでt2.microを選ぶとベースラインが10%なのでvCPUは実質0.1しかないため、AWSに引越しした途端サイトが落ちまくって「同じスペックを選んだはずなのにどうして？！」という事態になる可能性があるということです。

CPUクレジットが尽きたら追加課金でバーストモードを延長できるT2 Unlimitedというオプションもありますが、Unlimitedで延々課金されるくらいならもう少し上のインスタンスタイプを選んでベースラインを超えないようにしましょう。ちなみに3世代目のT3系はこのUnlimitedがデフォルトで有効になっているので「なーんだ、t3.microでも結構アクセスさばけるじゃん！」と思っていると、実はUnlimitedで延々課金されていた！となる初心者殺しな仕様といえます。

===[/column]

=== ステップ 3: インスタンスの詳細の設定

ステップ3のインスタンスの詳細（@<img>{ec2Step03}）は、すべてデフォルト設定のままで構いません。そのまま「次の手順: ストレージの追加」をクリックしてください。

//image[ec2Step03][何も変更せず「次の手順: ストレージの追加」をクリック][scale=0.8]{
//}

=== ステップ 4: ストレージの追加

ステップ4ではサーバにくっつけるストレージの容量を設定（@<img>{ec2Step04}）します。ストレージというのはデータを保存しておく場所のことです。皆さんのパソコンにも「ハードディスク」というストレージがついていて、作ったファイルはそこに保存していますよね。

AmazonにはEBS@<fn>{ebs}というストレージサービスがあり、ここでは「EC2のサーバにくっつけるEBSの種類やサイズはどうしますか？」と聞かれています。

//image[ec2Step04][何も変更せず「次の手順: タグの追加」をクリック][scale=0.8]{
//}

//footnote[ebs][EBSはAmazon Elastic Block Storeの略で、EC2向けのストレージサービスのことです。]

下部に「無料利用枠の対象であるお客様は30GBまでのEBS汎用 (SSD) ストレージまたはマグネティックストレージを取得できます。」と書いてあるとおり、無料利用枠でEBSは最大30GBまで使えますがデフォルトの8GBのままで十分なので変更は不要です。「次の手順: タグの追加」をクリックしてください。

=== ステップ 5: タグの追加

ステップ5ではインスタンスにタグを付けて分類（@<img>{ec2Step05}）できます。タグにはキーと値があり、たとえばキーが「Environment（環境）」のタグを作って、インスタンスによって値を「production（本番）」や「staging（ステージング）」や「Develop（開発）」にすることで、どれが本番のサーバでどれがステージングのサーバなのか区別できるようになります。

//image[ec2Step05][タグは作成せず「次の手順: セキュリティグループの設定」をクリック][scale=0.8]{
//}

今回はサーバは1台しか立てないので、タグはつけずに先へ進みましょう。「次の手順: セキュリティグループの設定」をクリックしてください。

=== ステップ 6: セキュリティグループの設定

ステップ6ではセキュリティグループの設定（@<img>{ec2Step06}）を行います。セキュリティグループというのはいわゆる「ファイアウォール」のことで「自宅からのアクセスは通すけどそれ以外からは通さない」のように特定の通信のみを通してそれ以外は阻止することで、文字通り防火壁となってサーバを守ってくれます。

上部の「セキュリティグループの割り当て」が「新しいセキュリティグループを作成する」になっていることを確認したら、次の2つを入力@<fn>{onlyEnglish}してください。

//footnote[onlyEnglish][セキュリティグループ名や説明には日本語は使えませんので注意してください。]

 1. セキュリティグループ名 : ec2-security-group
 2. 説明 : Allow from anywhere

//image[ec2Step06][セキュリティグループ名と説明を変更したら「確認と作成」をクリック][scale=0.8]{
//}

続いて「ここからのアクセスのみを通す」というルールを確認します。下部に「送信元が0.0.0.0/0のルールを指定すると、すべてのIPアドレスからインスタンスにアクセスすることが許可されます。」という警告が出ているとおり、デフォルトのルールは「SSH@<fn>{ssh}での接続はどこからでも通す」という設定になっています。@<fn>{allowFrom}このままで構いませんので「確認と作成」をクリックしてください。

//footnote[ssh][SSHという単語が突然出てきましたが、SSHについては後述します。]
//footnote[allowFrom][サーバにどこからでも接続できてしまうのはよくないので、できればSSHでのアクセス元も制限したいのですが、ここで制限をかけると「出先でモバイルWi-Fiに繋いだとき」などに接続元のIPアドレスが変わってファイアウォールで阻止され、あなた自身もサーバに接続できなくなってしまいます。今自宅にいて今後も自宅からしかサーバにSSHで接続しない！自宅のIPアドレスは固定だから変わらない！という人だけ、ルールのソースを「マイIP」にして説明に「IP address of my house」と書いておいてください。こうするとあなたの自宅のIPアドレスからしかSSHで接続できなくなります。]

=== ステップ 7: インスタンス作成の確認

ステップ7は「この内容でインスタンスを作成しますよ？問題ないですか？」という確認の画面（@<img>{ec2Step07}）です。表示されている内容で問題なければ「作成」をクリックしてください。

//image[ec2Step07][問題なければ「作成」をクリック][scale=0.8]{
//}

=== キーペアのダウンロード

「作成」をクリックすると「既存のキーペアを選択するか、新しいキーペアを作成します。」と表示（@<img>{ec2Step08}）されます。「新しいキーペアの作成」を選んでキーペア名を「start-aws-keypair」にしてください。

//image[ec2Step08][キーペア名を「start-aws-keypair」にして「キーペアのダウンロード」をクリック][scale=0.8]{
//}

キーペアとはサーバに入るための鍵と鍵穴のペアのことです。サーバのドアに鍵穴を設置してパソコンに鍵を保存することで、鍵を持っている人しかサーバに入れなくなります。キーペア名を入力したら「キーペアのダウンロード」をクリック（@<img>{ec2Step09}）してください。そしてダウンロードしたキーペア（start-aws-keypair.pem）はパソコンの@<ttb>{デスクトップなど絶対に忘れない場所に保存}（@<img>{ec2Step10}）しておいてください。

//image[ec2Step09][ダウンロードしたキーペア（start-aws-keypair.pem）を保存][scale=0.8]{
//}

//image[ec2Step10][デスクトップなど絶対に忘れない場所に保存しておくこと][scale=0.8]{
//}

このキーペア（start-aws-keypair.pem）はこれ以降@<ttb>{2度とダウンロードできません}。家の鍵と同じで、キーペアをなくしてしまうとこの後サーバに入ろうとしたときに「鍵がない！入れない！」となります。絶対になくさないでください。

キーペアをパソコンに保存したら「インスタンスの作成」をクリック（@<img>{ec2Step11}）してください。

//image[ec2Step11][キーペアをパソコンに保存したら「インスタンスの作成」をクリック][scale=0.8]{
//}

「インスタンスの作成」をクリックすると、作成ステータスの画面で「インスタンスは現在作成中です」（@<img>{createStatus}）と表示されます。

//image[createStatus][「インスタンスは現在作成中です」と表示されたらインスタンスIDをクリック][scale=0.8]{
//}

「i-0834366f265c8616f」のようなインスタンスIDをクリックしてEC2ダッシュボードに戻りましょう。

=== 作成したインスタンスに名前をつける

作成したインスタンスが表示（@<img>{instanceList}）されていますので、このインスタンスに名前を付けておきましょう。Nameのところにカーソルを持っていくと鉛筆のマークが表示されますのでクリックしてください。

//image[instanceList][「インスタンスは現在作成中です」と表示されたらインスタンスIDをクリック][scale=0.8]{
//}

Nameに「start-aws-instance」と書いたらチェックボタンを押して（@<img>{instanceName}）ください。インスタンス名には日本語を使わないことをお勧めします。

//image[instanceName][「インスタンスは現在作成中です」と表示されたらインスタンスIDをクリック][scale=0.8]{
//}

 * Nameが「start-aws-instance」になっていること
 * インスタンスの状態が「running」になっていること

を確認（@<img>{namedInstance}）したらインスタンスの作成は完了です。@<fn>{notYet}

おめでとうございます！あなたは無事に「サーバを立てた」のです！それでは自分で立てたサーバに入ってみましょう。

//image[namedInstance][「インスタンスは現在作成中です」と表示されたらインスタンスIDをクリック][scale=0.8]{
//}

//footnote[notYet][もしインスタンスの状態が「running」以外だった場合は、少し待ってから右上の更新マークをクリックしてみてください。]

=== 【ドリル】秘密鍵をなくしたらどうなる？

==== 問題

ある日パソコンが壊れてしまい、パソコン上に保存してあったキーペアこと「start-aws-keypair.pem」も消滅してしまいました。キーペアはサーバへSSHでログインするときに必要なのですが、キーペアがなくなってしまったのであなたはとても困っています。どうしたらまたサーバにログインできるようになるのでしょうか？

 * A. キーペアをマネジメントコンソールのEC2ダッシュボードから再ダウンロードすればよい
 * B. 再ダウンロードはできないのでEC2ダッシュボードからキーペアを再発行すればよい
 * C. キーペアをなくしたら二度とサーバにはログインできない

//raw[|latex|\begin{reviewimage}\begin{flushright}\includegraphics[width=0.5\maxwidth\]{./images/answerColumnShort.png}\end{flushright}\end{reviewimage}]

==== 解答

正解はCです。キーペアは1回きりのダウンロードで再発行もできません。壊れたパソコンからキーペアを持ち出せない場合、そのサーバには二度とSSHでログインできません。残念ですが新しくインスタンスを作り直すしか方法はありません。

== サーバに「入る」とは？

無事にEC2でインスタンスが作成できたので、いよいよサーバに入ってみたいのですが・・・ところでサーバに「入る」といわれてもピンときますか？サーバに「入る」って、いったいどういうことでしょう？

 * ファイルをアップするためにWinSCPやCyberduckでサーバに「接続する」
 * ログを見るためにターミナルでサーバに「ログインする」

この2つはどちらもサーバに「入る」という行為です。

「今までサーバになんか入ったことない！」という方でも、こんな画面（@<img>{winScp}）を見たことはありませんか？

//image[winScp][WinSCPでサーバに「入る」][scale=0.8]{
//}

これは「FTPクライアント」という種類のソフトで、サーバへ画像やHTMLファイルなどをアップロードするときによく使われます。左側が自分が使っているパソコンで、右側がサーバに「入って」います。

もう1つ、こんな画面（@<img>{terminal}）も見たことはありませんか？

//image[terminal][ターミナルでサーバに「入る」][scale=0.8]{
//}

こちらは「ターミナル」という種類のソフトで、サーバでログの確認をしたり設定ファイルを書き換えたりするときに使われます。エンジニア以外の人には、いわゆる「黒い画面」と言った方がお馴染みかもしれません。

ところでFTPクライアントの右側とターミナルを見比べてみてください。どちらも「image」というフォルダがあって、「aaa.html」と「bbb.php」というファイルがありますよね。実はこの2つ、どちらも同じサーバに入って同じフォルダを見ています。

実際の画面を目にしたことで、少しはサーバに「入る」という言葉のイメージがつきましたでしょうか？

=== SSHとは？

EC2のインスタンスを立てる途中、セキュリティグループが「SSHでの接続はどこからでも通す」という設定になっていたのを覚えていますか？

ここでこの「SSH」について少し説明をします。SSHとはSecure Shellの略で、データセンターにあるサーバと自分が使っている目の前のパソコンをセキュアに繋いでくれるサービスのことです。

@<chapref>{infraAndServer}で「サーバとはクライアントに対してサービスを提供するものである」という説明をしました。聞きなれないかも知れませんが、実は「SSHが動いているサーバ」のことをSSHサーバと呼びます。

ビアサーバは客に対してビールを提供するもので、ウェブサーバは客に対してウェブページを提供するものでしたが、SSHサーバはいったい何のサービスを提供してくれるのでしょう？

SSHは「サーバに入れて」とリクエストされたら、その人が誰なのか確認した上でサーバに入れてくれます。つまりSSHサーバは、サーバへアクセスしてきた客に対して「ネットワークを介してサーバにログインできる」というサービスを提供しているのです。SSHがあることによってデータセンターにあるサーバと自分が使っている目の前のパソコンをセキュアに繋ぐことができるのです。

SSHと似ている仕組みに「FTP」@<fn>{ftp}や「Telnet」@<fn>{telnet}があります。定番FTPクライアントである「FFFTP」なら使ったことがある、という方もいるのではないでしょうか。

//footnote[ftp][File Transfer Protocolの略。]
//footnote[telnet][Telecommunication networkの略。]

このFTPやTelnetでは通信内容が暗号化されずにそのまま送られるため、通信経路を盗聴すればアカウントやパスワードは丸見えになってしまう、という問題点がありました。自分のパソコンからサーバまでの道のりを通信データが丸裸で流れていってしまうようなイメージです。

それに対してSSHはデータを暗号化した上でやり取りできます。きちんと全身タイツを着て正体が見えない状態で通信データが流れていくので、たとえ盗聴されても暗号化する前のデータがどんなものだったのかはすぐには分かりません。そのためサーバにファイルをアップロードしたりダウンロードしたりするときには、このSSHの機能を用いた「SFTP」@<fn>{sftp}や「SCP」@<fn>{scp}というファイル転送の仕組みがよく使われます。

//footnote[sftp][SSH File Transfer Protocolの略。]
//footnote[scp][Secure Copyの略。]

このような理由からサーバにはSSHで入ります。

=== パスワード認証と鍵認証

サーバにSSHで入るときには、そのユーザが本人かどうかを確認する方法として「パスワード認証」や「鍵認証」が用いられることが多いです。

パスワード認証ではユーザ名とパスワードを使ってサーバに入ります。鍵認証の場合はあらかじめサーバに鍵穴を設置しておいて、パソコンの中にある鍵を使ってサーバに入ります。鍵穴と鍵@<fn>{whatIsKeypair}のペアなので「キーペア」と呼ばれているのですね。この鍵というのが皆さんが先ほどダウンロードした「start-aws-keypair.pem」のことなのです。

//footnote[whatIsKeypair][鍵穴は「公開鍵」あるいは「パブリックキー」、鍵は「秘密鍵」あるいは「プライベートキー」と呼ばれます。]

先ほど作ったインスタンスにはすでに鍵穴は設置されているので、鍵（start-aws-keypair.pem）を使えばサーバに入ることができます。

=== 接続先となるサーバのIPアドレス

サーバに「入る」ということのイメージが付いたところで、接続先となるサーバのIPアドレスを確認してみましょう。

先ほど作成したインスタンスの説明（@<img>{instanceIPv4PublicAddress}）の中にある「IPv4パブリックIP」をメモ（@<table>{IPv4Address}）してください。

//image[instanceIPv4PublicAddress][「説明」タブの「IPv4パブリックIP」をメモ][scale=0.8]{
//}

//table[IPv4Address][インスタンスのIPv4パブリックIPをメモ]{
例	IPv4パブリックIP
------------------------------------
13.230.112.72	
//}

「IPv4パブリックIP」のところへカーソルを持っていくと「クリップボードにコピー」と表示（@<img>{memoIPv4Address}）されますので、パソコンの中のメモ帳などにもメモしておくと便利です。

//image[memoIPv4Address][パソコンの中のメモ帳などにもメモしておく][scale=0.8]{
//}

それではメモしたIPアドレスを使ってサーバに入ってみましょう。

== SSHでサーバに入ってみよう

=== お使いのパソコンがWindowsの場合

Windowsのパソコンを使っている方は、デスクトップの「rlogin_x64」というフォルダの中にある「RLogin.exe」（@<img>{startRLogin01}）をダブルクリックしてRLoginを起動（@<img>{startRLogin02}）してください。起動したら「新規」をクリックします。

//image[startRLogin01][RLogin.exeをダブルクリック][scale=0.8]{
//}

//image[startRLogin02][RLoginが起動したら「新規」をクリック][scale=0.8]{
//}

初めに「エントリー（上）/コメント（下）」に「start-aws-instance」と入力します。続いて「ホスト名（サーバーIPアドレス）」に先ほどメモした「IPv4パブリックIP」を入力（@<img>{startRLogin03}）します。「ログインユーザー名」には「ec2-user」と入力してください。ec2-userというのはインスタンスを作成すると最初から存在しているユーザです。

//image[startRLogin03][「ホスト名（サーバーIPアドレス）」と「ログインユーザー名」を入力][scale=0.6]{
//}

続いて「SSH認証鍵」をクリック（@<img>{startRLogin04}）して、デスクトップなど絶対に忘れない場所に保存しておいた「start-aws-keypair.pem」を選択したら「開く」をクリックします。

//image[startRLogin04][「SSH認証鍵」をクリックして「start-aws-keypair.pem」を選択][scale=0.8]{
//}

次に左メニューで「プロトコル」を選択（@<img>{startRLogin05}）したら、「KeepAliveパケットの送信間隔(sec)」にチェックを入れておきます。これを設定しておくとターミナルをしばらく放っておいても接続が勝手に切れません。

//image[startRLogin05][「KeepAliveパケットの送信間隔(sec)」にチェックを入れる][scale=0.6]{
//}

続いて左メニューで「クリップボード」を選択（@<img>{startRLogin06}）したら、「左クリックの範囲指定だけでクリップボードにコピーする」と「コピー時に範囲指定を解除しない」にチェックを入れます。

//image[startRLogin06][「左クリックの範囲指定だけでクリップボードにコピーする」と「コピー時に範囲指定を解除しない」にチェック][scale=0.6]{
//}

次に左メニューで「フォント」を選択（@<img>{startRLogin07}）したら、文字セットを「UTF-8」に変更します。すべて設定できたら「OK」をクリックしてください。

//image[startRLogin07][文字セットを「UTF-8」に変更][scale=0.6]{
//}

設定が保存できたら「OK」をクリック（@<img>{startRLogin08}）してください。

//image[startRLogin08][設定が保存できたら「OK」をクリック][scale=0.8]{
//}

すると初回のみ、この「公開鍵の確認」が表示（@<img>{startRLogin09}）されます。これは「初めて入るサーバだけど信頼していいですか？本当に接続しますか？」と聞かれているので、「接続する」をクリックしてください。サーバにはそれぞれフィンガープリントという固有の指紋があるため、下部の「この公開鍵を信頼するリストに保存する」にチェックが入っていればRLoginが覚えていてくれて、次回以降は「これは前に信頼していいって言われたサーバだ！」と判断してそのまま接続させてくれます。

//image[startRLogin09][「公開鍵の確認」が表示されたら「接続する」をクリック][scale=0.6]{
//}

続いて「信頼するホスト鍵のリストを更新しますか？」と聞かれたら「はい」をクリック（@<img>{startRLogin10}）してください。

//image[startRLogin10][「信頼するホスト鍵のリストを更新しますか？」と表示されたら「はい」をクリック][scale=0.8]{
//}

「Amazon Linux AMI」と表示（@<img>{startRLogin11}）されたら無事サーバに入れています。おめでとうございます！

//image[startRLogin11][「EC2」というアスキーアートが表示されたら成功！][scale=0.8]{
//}

もし「Amazon Linux AMI」と表示されず、代わりに「SSH2 User Auth Failure "publickey" Status=0004 Send Disconnect Message... none」というようなエラーメッセージが表示（@<img>{startRLogin12}）されてしまったら、これは「鍵がない人は入れないよ！」とお断りされている状態です。恐らく「SSH認証鍵」をクリックして「start-aws-keypair.pem」を選択する作業を忘れているものと思われますので「SSH認証鍵」の設定を確認してみてください。

//image[startRLogin12][このエラーが表示されたら「SSH認証鍵」の設定を確認しよう][scale=0.8]{
//}

あるいは「接続済みの呼び出し先が一定の時間を過ぎても正しく応答しなかったため、接続できませんでした。」というエラーメッセージが表示（@<img>{startRLogin13}）されてしまった場合は、「ホスト名（サーバーIPアドレス）」に書いた「IPv4パブリックIP」が間違っているものと思われます。「ホスト名（サーバーIPアドレス）」のIPアドレスを確認してみてください。

//image[startRLogin13][このエラーが表示されたら「ホスト名（サーバーIPアドレス）」のIPアドレスを確認しよう][scale=0.8]{
//}

=== お使いのパソコンがMacの場合

Macを使っている方は、ターミナルを起動してください。ターミナルがどこにあるのか分からないときは、Macの画面で右上にある虫眼鏡のマークをクリックして、Spotlightで「ターミナル」と検索すれば起動できます。

そして開いたターミナルで次の文字を入力してReturnキーを押します。これはサーバに入るときに使う鍵をオーナー以外が使えないよう、chmodというコマンドで読み書き権限を厳しくしています。この作業は最初の1回だけで構いません。

//comment{
TODO:Macの部分は後でキャプチャを追加
//}
//cmd{
chmod 600 start-aws-keypair.pem
//}

続いてターミナルで次の文字を入力したら再びReturnキーを押します。「IPv4パブリックIP」の部分は先ほどメモした「IPv4パブリックIP」に書き換えてください。また「username」の部分もMacのユーザ名に書き換えてください。-iオプションは「サーバにはこの鍵を使って入ります」という意味ですので、もし「start-aws-keypair.pem」を保存した場所がデスクトップ以外の場合は適宜書き換えてください。

//cmd{
ssh ec2-user@IPv4パブリックIP -i /Users/username/Desktop/start-aws-keypair.pem
//}

初回のみ次のようなメッセージが表示されますが、これは「初めて入るサーバだけど信頼していいですか？本当に接続しますか？」と聞かれていますので、「yes」と打ってReturnキーを押してください。するとMacはちゃんとこのサーバのことを覚えてくれて、次回以降は「これは前に信頼していいって言われたサーバだ！」と判断してそのまま接続させてくれます。

//cmd{
Are you sure you want to continue connecting (yes/no)?
//}

「Amazon Linux AMI」と表示されたら無事サーバに入れています。おめでとうございます！

=== サーバをシャットダウンしてみよう

折角サーバにログインできたので早速コマンド（命令）を打ってみましょう。できれば普段は絶対に打つ機会のないような・・・そうだ！

//cmd{
sudo shutdown -h now
//}

と入力したらEnterキー（もしくはReturnキー）を押してください。（@<img>{shutdownServer}）これはサーバをシャットダウンするコマンドです。シャットダウンが気軽に試せるのは勉強用のインスタンスならではですね。

//image[shutdownServer][サーバをシャットダウンしてみよう][scale=0.8]{
//}

Enterキーを押したらサーバがシャットダウンされてSSHの接続も切れてしまいました。それではちゃんとシャットダウンできたのか、EC2のダッシュボードからも確認してみましょう。EC2ダッシュボードで左メニューの「インスタンス」を選択（@<img>{instanceStopped}）したら、右上の更新マークをクリックしてください。シャットダウンしたのでインスタンスの状態が「stopped」になっています。

//image[instanceStopped][EC2ダッシュボード＞左メニューの「インスタンス」＞更新マークをクリック][scale=0.8]{
//}

それでは止まってしまったサーバを再起動しましょう。「アクション」から「インスタンスの状態」で「開始」をクリック（@<img>{startInstance01}）してください。

//image[startInstance01][アクション＞インスタンスの状態＞開始をクリック][scale=0.8]{
//}

「これらのインスタンスを開始してよろしいですか?」（@<img>{startInstance02}）と確認が出るので「開始する」をクリックしてください。

//image[startInstance02][アクション＞インスタンスの状態＞開始をクリック][scale=0.8]{
//}

インスタンスの状態が「pending」になったら「running」になるまで、何度か右上の更新マークをクリック（@<img>{startInstance03}）してみてください。

//image[startInstance03][インスタンスの状態が「running」になるまで右上の更新マークをクリック][scale=0.8]{
//}

インスタンスの状態が「running」になったら再びサーバに入ってみましょう。Windowsの方はRLoginで左のアイコンをクリック（@<img>{RloginAgain01}）します。先ほどの「start-aws-instance」を選択したら「OK」をクリックしてください。

//image[RloginAgain01][「start-aws-instance」を選択したら「OK」をクリック][scale=0.8]{
//}

Macの方は先ほどとまったく同じコマンド（命令）を実行してみてください。キーボードで「↑」を押すと直前に打ったコマンドが出てきますので、その状態でReturnキーを押してください。

//cmd{
ssh ec2-user@IPv4パブリックIP -i /Users/username/Desktop/start-aws-keypair.pem
//}

シャットダウンしてから起動しただけで何の設定も変えてないので、すぐサーバに接続できると思ったのですが・・・暫く真っ黒い画面が続いた後、「接続済みの呼び出し先が一定の時間を過ぎても正しく応答しなかったため、接続できませんでした。」というエラー（@<img>{RloginAgain02}）が出て接続できなくなってしまいました。「いいえ」をクリックしてエラー画面を閉じましょう。

//image[RloginAgain02][シャットダウンして起動したらサーバに繋がらなくなった！][scale=0.8]{
//}

いわゆる「何もしてないのに壊れた！」状態ですが、いったい何が起きたのでしょう？

=== 再起動しても変わらないElasticIPをつけよう

急にサーバに入れなくなった原因を探るべく、再びEC2ダッシュボードでインスタンスの状態を見てみましょう。（@<img>{RloginAgain03}）エラーメッセージには「応答しなかった」とありますが、インスタンスはちゃんと起動しています。

では「IPv4パブリックIP」に注目してみてください。何か気づきませんか？

//image[RloginAgain03][「IPv4パブリックIP」に注目してみよう][scale=0.8]{
//}

先ほど自分でメモした「IPv4パブリックIP」と、今表示されている「IPv4パブリックIP」を比較（@<table>{IPv4AddressDiff}）
してみてください。

//table[IPv4AddressDiff][インスタンスのIPv4パブリックIPを比較]{
シャットダウン前のIPv4パブリックIP	現在のIPv4パブリックIP
------------------------------------
13.230.112.72	54.249.121.146
//}

そうなんです！シャットダウンする前と、起動しなおした今の「IPv4パブリックIP」を比較すると、まったく別々のIPアドレスになっているのです。

実はインスタンスが停止されると、そのインスタンスに紐づいていたIPアドレスは解放されてしまい、インスタンスが再起動されるとまた新しいIPアドレスが紐づけられる、というのがEC2の仕様なのです。

このままだと停止して起動するたびに「サーバに繋がらなくなった！」と大騒ぎする破目になるので、そうならないようElasticIPでサーバに固定のIPアドレスをつけましょう。

=== ターミナルはなんのためにある？

=== Bastion

= サーバのバックアップを取っておこう
== スナップショット
== AMI

= ELBでバランシングやサーバの台数を管理しよう
== ELB
== Auto Scaling
=== スケーリングに使える
=== サーバが1台死んでも自動で1台立ち上がる

= DBサーバを立てよう
== RDS

= ネームサーバの設定をしよう
== Route53

= もっとAWSについて勉強したい！

== 公式のオンラインセミナーや資料集

 AWSについてもっと勉強したい！という場合は、ネットに繋がればどこからでも参加できる「AWS Black Belt Online Seminar」というオンラインセミナーを受けてみましょう。

@<href>{https://aws.amazon.com/jp/about-aws/events/webinars/}

過去に開催されたオンラインセミナーの資料は「AWSクラウドサービス活用資料集」で公開されています。EC2やELBなどのサービス別に資料が用意されていますので、そちらを読んでみるのもお勧めです。

@<href>{https://aws.amazon.com/jp/aws-jp-introduction/}

== AWS認定資格のクラウドプラクティショナーを目指してみよう

AWSには公式の認定資格（@<img>{AWSCertificationRoadmap}）@<fn>{officialRoadmap}がいくつかあるのですが、その中で最初に挑戦しやすい入門者向けの認定資格は「クラウドプラクティショナー」です。

//image[AWSCertificationRoadmap][AWS認定資格のロードマップ][scale=0.8]{
//}

//footnote[officialRoadmap][AWS認定より引用。 @<href>{https://aws.amazon.com/jp/certification/}]

認定資格に挑戦することでAWSの主要なサービスやセキュリティの基本、料金体系などをまんべんなく学ぶことができます。本著を読んで「もっとAWSについて勉強したいな！」と思ったらチャレンジしてみてはいかがでしょうか？

= AWSをやめたくなったらすること
== 無料の1年が終わる前にすべきこと

=== 【ドリル】サンプル

==== 問題

問題問題

 * A. Route53
 * B. お名前.com

//raw[|latex|\begin{reviewimage}\begin{flushright}\includegraphics[width=0.5\maxwidth\]{./images/answerColumnShort.png}\end{flushright}\end{reviewimage}]

==== 解答

正解はBです。
